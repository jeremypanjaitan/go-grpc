// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// Create a user function
	CreateUser(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserCreatedReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*UserCreatedReply, error) {
	out := new(UserCreatedReply)
	err := c.cc.Invoke(ctx, "/grpcgo.User/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// Create a user function
	CreateUser(context.Context, *UserDataRequest) (*UserCreatedReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateUser(context.Context, *UserDataRequest) (*UserCreatedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgo.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcgo.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcgo/grpcgo.proto",
}

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	CreateProduct(ctx context.Context, in *ProductDataRequest, opts ...grpc.CallOption) (*ProductCreatedReply, error)
	GetBulkProduct(ctx context.Context, in *GetBulkProductQuery, opts ...grpc.CallOption) (Product_GetBulkProductClient, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) CreateProduct(ctx context.Context, in *ProductDataRequest, opts ...grpc.CallOption) (*ProductCreatedReply, error) {
	out := new(ProductCreatedReply)
	err := c.cc.Invoke(ctx, "/grpcgo.Product/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetBulkProduct(ctx context.Context, in *GetBulkProductQuery, opts ...grpc.CallOption) (Product_GetBulkProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &Product_ServiceDesc.Streams[0], "/grpcgo.Product/GetBulkProduct", opts...)
	if err != nil {
		return nil, err
	}
	x := &productGetBulkProductClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Product_GetBulkProductClient interface {
	Recv() (*ProductBulkDataResponse, error)
	grpc.ClientStream
}

type productGetBulkProductClient struct {
	grpc.ClientStream
}

func (x *productGetBulkProductClient) Recv() (*ProductBulkDataResponse, error) {
	m := new(ProductBulkDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	CreateProduct(context.Context, *ProductDataRequest) (*ProductCreatedReply, error)
	GetBulkProduct(*GetBulkProductQuery, Product_GetBulkProductServer) error
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) CreateProduct(context.Context, *ProductDataRequest) (*ProductCreatedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServer) GetBulkProduct(*GetBulkProductQuery, Product_GetBulkProductServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBulkProduct not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcgo.Product/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateProduct(ctx, req.(*ProductDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetBulkProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBulkProductQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServer).GetBulkProduct(m, &productGetBulkProductServer{stream})
}

type Product_GetBulkProductServer interface {
	Send(*ProductBulkDataResponse) error
	grpc.ServerStream
}

type productGetBulkProductServer struct {
	grpc.ServerStream
}

func (x *productGetBulkProductServer) Send(m *ProductBulkDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcgo.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _Product_CreateProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBulkProduct",
			Handler:       _Product_GetBulkProduct_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpcgo/grpcgo.proto",
}
